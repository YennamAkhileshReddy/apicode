stages:
  - stage: Build
    jobs:
      - job: Build
        pool: 
          vmImage: 'ubuntu-16.04'
        steps:
          #- task: UseDotNet@2
            #displayName: 'Use .NET Core sdk'
            #inputs:
              #packageType: 'runtime'
              #version: '3.1.101'
          - task: DotNetCoreCLI@2
            displayName: 'dotnet restore'
            inputs:
              command: 'restore'
              projects: '$(project_path)'
              arguments: '--configuration Release'
          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              command: 'build'
              projects: '$(project_path)'
              arguments: '--configuration Release'
          - task: DotNetCoreCLI@2
            displayName: 'dotnet publish'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '$(project_path)'
              arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true
          - task: PublishBuildArtifacts@1
            displayName: 'publish to drop'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(Drop).$(Build.BuildId)'
              publishLocation: 'Container'
  - stage: DeployDevStage
    displayName: Deploy Dev
    dependsOn: Build
    condition: succeeded()
    jobs:
    - deployment: DeployDev
      displayName: Deploy Dev
      environment: dev
      pool: 
        vmImage: 'ubuntu-16.04'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadBuildArtifacts@0
                displayName: 'Download artifacts from Devops'
                inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: '(Drop).$(Build.BuildId)'
                  downloadPath: '$(System.ArtifactsDirectory)'
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'SDLC_Connection_linux'
                  appType: 'webAppLinux'
                  WebAppName: 'sdlcrules01-dev'
                  packageForLinux: '$(System.ArtifactDirectory)/$(Drop).$(Build.BuildId)/*.zip'
                  RuntimeStack: 'DOTNETCORE|2.1'
  - stage: DeployQAStage
    displayName: Deploy to QA
    dependsOn: DeployDevStage
    condition: succeeded()
    jobs:
    - deployment: DeployQA
      displayName: Deploy QA
      environment: qa
      pool: 
        vmImage: 'ubuntu-16.04'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadBuildArtifacts@0
                inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: '(Drop).$(Build.BuildId)'
                  downloadPath: '$(System.ArtifactsDirectory)'
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'SDLC_Connection_linux'
                  appType: 'webAppLinux'
                  WebAppName: 'sdlcrules01-qa'
                  deployToSlotOrASE: true
                  ResourceGroupName: 'WMSDLC-linux'
                  SlotName: 'blue'
                  packageForLinux: '$(System.ArtifactDirectory)/$(Drop).$(Build.BuildId)/$(project_name).zip'
                  RuntimeStack: 'DOTNETCORE|2.1'
  - stage: DeployQA2Stage
    displayName: Deploy QA2
    dependsOn: DeployQAStage
    condition: succeeded()
    jobs:
    - deployment: DeployQA2 
      displayName: SwapQABluewithGreen
      environment: qa2
      pool: 
        vmImage: 'ubuntu-16.04'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureAppServiceManage@0
                inputs:
                  azureSubscription: 'SDLC_Connection_linux'
                  Action: 'Swap Slots'
                  WebAppName: 'sdlcrules01-qa'
                  ResourceGroupName: 'WMSDLC-linux'
                  SourceSlot: 'blue'
  - stage: DeployPreProdStage
    displayName: Deploy PreProd
    dependsOn: DeployQA2Stage
    condition: succeeded()
    jobs:
    - deployment: DeployPreProd
      displayName: Deploy PreProd
      environment: preprod
      pool: 
        vmImage: 'ubuntu-16.04'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadBuildArtifacts@0
                inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: '(Drop).$(Build.BuildId)'
                  downloadPath: '$(System.ArtifactsDirectory)'
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'SDLC_Connection_linux'
                  appType: 'webAppLinux'
                  WebAppName: 'sdlcrules01'
                  deployToSlotOrASE: true
                  ResourceGroupName: 'WMSDLC-linux'
                  SlotName: 'blue'
                  packageForLinux: '$(System.ArtifactDirectory)/$(Drop).$(Build.BuildId)/$(project_name).zip'
                  RuntimeStack: 'DOTNETCORE|2.1'
  - stage: DeployProdStage
    displayName: Deploy Prod
    dependsOn: DeployPreProdStage
    condition: succeeded()
    jobs:
    - deployment: SwapProdBluewithGreen
      displayName: Deploy to Prod
      environment: prod
      pool: 
        vmImage: 'ubuntu-16.04'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureAppServiceManage@0
                inputs:
                  azureSubscription: 'SDLC_Connection_linux'
                  Action: 'Swap Slots'
                  WebAppName: 'sdlcrules01'
                  ResourceGroupName: 'WMSDLC-linux'
                  SourceSlot: 'blue'
  
           
